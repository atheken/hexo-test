<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AndrewTheken.com</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://andrewtheken.com/"/>
  <updated>2015-01-04T14:32:51.000Z</updated>
  <id>http://andrewtheken.com/</id>
  
  <author>
    <name>Andrew Theken</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Set for Life</title>
    <link href="http://andrewtheken.com/2014/12/31/2012-06-02-set-for-life/"/>
    <id>http://andrewtheken.com/2014/12/31/2012-06-02-set-for-life/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been meaning to write this post for over a year now, but now seems like an important time to write it.<br>There’s a common saying: “Set for life,” which usually means “Financially secure for the rest of your life.” Someone winning a Powerball jackpot would be set for life. I think there’s a much more achievable version of “Set for life” that more of us should aspire to: creating a niche in the world where we can do the work we love doing for the rest of our career.</p>
<p>A friend of mine started a SaaS company early in his career. While I don’t know any of the financial details, the process of starting the company, and nurturing it to its current state speaks volumes for his abilities. The company was acquired, and my friend stayed on for a few years, but has recently left to explore new opportunities. The company has, from my perspective, been a success.</p>
<p>Although I’m sure he didn’t win the jackpot, I am also sure that he is set for life. I think he’ll enjoy options to work where, and how he wants for the rest of his career. He knows what it would take to do it again. Imagine if you were in his position, knowing what it takes to make your own way, and having some success behind you to push you forward. I see that as a much more satisfying version of “set for life” than merely winning the Powerball. (Of course, being independently wealthy would be fun, too!)<br>Here comes some hackneyed cliches: We live in a time where each of us can be “Set for Life,” purely by finding what we’re good at, and creating a niche for ourselves. The costs to start our own thing are in the few hundreds to a few thousands of dollars, plus our time and our talent. Who can’t find a way to put together a few thousand bucks to get their dream started? Who doesn’t want to know what they’re made of? Who doesn’t want to be “Set for life?”<br>In the next 3 months, find a way to chip away at becoming an entrepreneur. Figure out what you’re better at than anybody else, and then figure out how you can get people to pay you for it. If you do, you’ll be set for life.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been meaning to write this post for over a year now, but now seems like an important time to write it.&lt;br&gt;There’s a common saying: “
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>San Franciso Trip</title>
    <link href="http://andrewtheken.com/2014/12/31/2006-03-21-san-francisco-trip/"/>
    <id>http://andrewtheken.com/2014/12/31/2006-03-21-san-francisco-trip/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Katie and I went to San Francisco, CA. IT WAS AWESOME! We walked everywhere, we were both exhausted at the end of every day. One of the reasons we went all the way out to Cali was for Katie to attend the APhA convention (it’s a Pharmacist thing). Cali also has great weather, food, scenery, culture, and cheap cameras/luggage. Katie received an award from the Pharmacy honor fraternity, Rho Chi. This is a national achievement, and I am very proud of her. I will post pictures of our trip soon.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Katie and I went to San Francisco, CA. IT WAS AWESOME! We walked everywhere, we were both exhausted at the end of every day. One of the r
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Google Wave</title>
    <link href="http://andrewtheken.com/2014/12/31/2009-05-31-google-wave/"/>
    <id>http://andrewtheken.com/2014/12/31/2009-05-31-google-wave/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Having watched the Google Wave intro video. I am impressed. I think one of the greatest risks for Wave is that the idea may be so far ahead of its time that people won’t “get it.” There are a great number of people out there that are invested in private communications and the very idea of someone else editing their content (even if the audit history is there) will make them very uncomfortable. When you think of Google’s position, it’s clear that they are so far ahead of the curve that they can take risks and put stuff like this out there - which allows them to change the rules and get buy-in. I think most interestingly, Google is going to make this an open protocol - which is really the only way it can be successful. Think ‘http’, ‘ftp’, ‘smtp’ all these protocols needed to be widely available for implementation or they would have failed. While we have incredible challenges in our time, looking at things like Google Wave that require us to rely and trust each other more (and create, new efficient ways to share information), I can’t help but feel positive about what the future holds for us.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Having watched the Google Wave intro video. I am impressed. I think one of the greatest risks for Wave is that the idea may be so far ahe
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Durham-bound</title>
    <link href="http://andrewtheken.com/2014/12/31/2006-06-25-durham-bound/"/>
    <id>http://andrewtheken.com/2014/12/31/2006-06-25-durham-bound/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Katie and I made a road trip down to Chapel Hill,NC this month. Katie took a practical exam to get licensed in North Carolina, she did very well. We also looked at about 10-15 houses where we might like to live. In the end, we ended up just renting a place because we want to get to know the area better before we make any moves.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Katie and I made a road trip down to Chapel Hill,NC this month. Katie took a practical exam to get licensed in North Carolina, she did ve
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NoRM: A fantastic friction-free interface to MongoDB</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-05-23-norm-a-fantastic-friction-free-interface-to-mongodb/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-05-23-norm-a-fantastic-friction-free-interface-to-mongodb/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>As promised in my previous post, I am going to introduce you to a project that I’ve been working on with a great team of people on GitHub. NoRM is a .net library to interact with the document-oriented database MongoDB. We set about doing this in a way that makes sense for the C# developer who doesn’t want to spend an inordinate amount of time configuring the database. As you’ll see in a moment, with NoRM, there’s very little you need to do to get started with MongoDB. NoRM stands for “No Object-Relational Mapping” - it seems that people are concerned about leaving relational databases because they’ll lose the low-friction environments they’ve come to expect (think ‘LINQ-to-SQL’). Another concern around moving to a NoSQL option is the notion that these datastores carry little or no structure. By creating a strongly-typed interface to MongoDB, I feel that we have addressed both of these concerns. So, just to whet your appetite, here’s an example of how you’d use NoRM to store some widgets.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//First, define your document (this can be very similar to your concept of &quot;Model&quot;</div><div class="line">// notice there&apos;&apos;s no special attributes or configuration.)</div><div class="line">public class Widget</div><div class="line">&#123;</div><div class="line">	public ObjectId Id &#123;get;set;&#125;</div><div class="line">	public String Color &#123;get;set;&#125;</div><div class="line">	public double Price &#123;get;set;&#125;</div><div class="line">	public DateTime ReleaseDate &#123;get;set;&#125;</div><div class="line">	public IEnumerable Reviews &#123;get;set;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Next, spool up a connection to your database </div><div class="line">//(The DB doesn&apos;&apos;t have to exist yet, but MongoDB DOES need to be running)</div><div class="line">using(var db = Mongo.Create(&quot;mongo://localhost/ProductDB&quot;)</div><div class="line">&#123;</div><div class="line">	//Get a reference to the collection in which we want to </div><div class="line">	//store our Widgets (doesn&apos;&apos;t have to exist yet.)</div><div class="line">	var widgets = db.GetCollection();</div><div class="line"></div><div class="line">	//create a widget instance.</div><div class="line">	var topSellingWidget = new Widget&#123; Id = ObjectId.NewObjectId(), </div><div class="line">		Color = &quot;Red&quot;, Price = 39.95,</div><div class="line">	ReleaseDate = DateTime.Now, Reviews = Enumerable.Empty() &#125;;</div><div class="line"></div><div class="line">	//now, save the instance</div><div class="line">	widgets.Save(topSellingWidget);</div><div class="line"></div><div class="line">	//lastly, retrieve it from the DB.</div><div class="line">	var hydratedTopSellingWidgetFromDB = widgets.FindOne(new &#123;Color = &quot;Red&quot;,</div><div class="line">		Price = 39.95&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That’s just a taste of the simplicity that is NoRM, there’s a huge amount of functionality that I’m not covering including:</p>
<ul>
<li>Fluent configuration</li>
<li>Solid LINQ support</li>
<li>Advanced update capabilities (update single or multiple documents that match template documents)</li>
<li>Map/Reduce functionality.</li>
<li>Support for MongoDB operators via the “Q” (Qualifiers) and “M” (Modifiers) classes.</li>
<li>If you need it, “Weakly-typed” interaction via the “Expando” class.</li>
<li>Bulk-insert capability (a la SqlBulkCopy)</li>
</ul>
<p>Aside from actual “features”, there are lots of elements that make software good, here’s a few things I think make NoRM awesome:<br>Tests: We have more than 400 tests that verify the functionality found in NoRM, and although we have just reached the v0.9.0 milestone, the library is very stable, and I am aware of production deployments using NoRM, today.</p>
<p>Participation: I started NoRM in the last few days of January 2010, and have seen incredible participation from the Open Source community - I’ve learned a lot about what people do — and don’t — need in a library, and some of the interesting pieces of helping to shape an Open Source project (hopefully I can share that in another blog post). We have a vibrant community at <a href="http://groups.google.com/group/norm-mongodb" target="_blank" rel="external">Google Groups</a>.<br>Pragmatism and Experience: I am routinely impressed by the ideas and code that the project’s contributors bring forward.</p>
<p>Please download and use the library:<br><a href="http://github.com/atheken/NoRM/zipball/v0.9.0" target="_blank" rel="external">Stable Milestone</a><br>Project Page <a href="http://github.com/atheken/norm" target="_blank" rel="external">the master branch will always “Stable”</a>.<br>Remember that we want NoRM to be the best C# driver for MongoDB possible, so please give us feedback, either in theGoogle Group or follow me on twitter (@atheken). </p>
<p>Cheers.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As promised in my previous post, I am going to introduce you to a project that I’ve been working on with a great team of people on GitHub
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Behaving badly in Public.</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-06-02-behaving-badly-in-public/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-06-02-behaving-badly-in-public/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of the key design decisions when writing any code is what level of access you should give each component. In general, my rule of thumb is “As little access as possible.” What this means is that I don’t want to make any class public that doesn’t need to be, and I don’t want to make any members public that are implementation details. In NoRM, we’ve tried to be judicious about what makes it into the Public API, there’s a number of reasons for this:KISS, presenting 20 classes to the user when there are only a handful of relevant ones makes for a confusing introduction. NoRM effectively has 4 major and immediately relevant classes: “Mongo”,”MongoDatabase”,”MongoCollection”,”MongoConfiguration”, telling the user about the other X classes that make everything happen is an over-share. I don’t like over-shares.</p>
<p>Making things public that shouldn’t be increases the likelihood that people can break your code in ways that you can’t conceive of. If one controls how code is accessed, there’s a whole class of issues that just cannot happen.</p>
<p>I recently had a conversation with a developer who has more experience, both in industry, and in Open Source than I do. I respect him. His stance was that when we’re talking about Open Source software specifically, the library should not place restrictions on what code a consumer can execute. I fundamentally disagree with that stance. Here’s why:A responsible project will understand that the software they’re helping to form will be used by other people. By making everything public, you’re implicitly giving license to consumers to use it however they wish, likely in scenarios that you couldn’t plan for. This may sound good, but when the class they use is for mainly infrastructure purposes and the project maintainers want to implement the feature in a different way, they’ll likely break the consumer.</p>
<p>The code is Free and Open, if a consumer really <em>must</em> use some class that the project maintainers marked as private/protected/internal, then it’s a simple matter of going in and marking it public. I believe this has the added benefit causing people to pause and ask the question: “Why was this marked in such a way as to prevent access to me — maybe the designers had a good reason?”</p>
<p>A corollary to the last point is that if there is a true roadblock in how someone wants to use the existing classes and codebase, we want to hear from them in the google groups. We want to know how people are using the library. We want to add the features they need. I should note that I don’t think we’re infallible on this stuff, there are a number of features in NoRM that I think are wonderful, but had it been me alone working on the project, those features wouldn’t have been implemented. The point is, try to contribute your ideas and features of NoRM, don’t roll your own, and then get broken the next time there’s a release.<br>What do you think?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the key design decisions when writing any code is what level of access you should give each component. In general, my rule of thum
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The &quot;Named Generic&quot; Anti-pattern</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-06-06-the-named-generic-anti-pattern/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-06-06-the-named-generic-anti-pattern/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Part One:<br>When it comes to code, I’m pretty particular about how things are named. To me, naming both classes and class members is one of the fine arts of software development. I actually think that this can demonstrate quite a bit about someone’s experience, what they understand about the software development life cycle, and ultimately, their conceptual understanding of Object-oriented design. That’s why this particular “code smell” bothers me so much.<br>I’ll call it the “Named Generic” pattern.<br>We’ve all seen it. A developer wanted to specify a typed parameter, but missed the boat.<br>For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public RecallList GetRecalls(AutoMakersList automakers)</div><div class="line">&#123;</div><div class="line">	// do something useful with each automaker and yield </div><div class="line">	//the recalls associated with them.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So far, this code isn’t bad. We have a decent method name, the parameter name is ok, but what are the two type definitions here:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class AutoMakersList : List&lt;String&gt;</div><div class="line">&#123; </div><div class="line">	/*no body*/ </div><div class="line">&#125;</div><div class="line"></div><div class="line">public class RecallList : List&lt;String&gt;</div><div class="line">&#123;</div><div class="line">	/*no body*/ </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Uh oh.<br>With two classes I have simultaneously reduced flexibility, and increased complexity. From the perspective of the consumer of this method, I now have to marshal a set of strings, then add them to a new class called AutoMakersList, which I had to search out and attempt to understand.<br>From the API designer’s perspective, I’ve placed some requirement on what is legal to pass in. Except I haven’t. The list is still of string, and the last time I checked, there were no validation methods on string that validate they are auto maker’s names (C# 5.0, maybe?). So I’ve really just obfuscated what I wanted to happen, which was this:<br>“hand me an enumerable of validated automakers”<br>The same could be done with this method signature:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">///&lt;summary&gt;This will produce the recalls associated with the specified automakers.&lt;/summary&gt;</div><div class="line">///&lt;param name=&quot;automakers&quot;&gt;This is a pre-validated set of automakers </div><div class="line">/// for which recalls will be retrieved. Valid automakers </div><div class="line">/// follow these rules: .....</div><div class="line">///&lt;/param&gt;</div><div class="line">public RecallList GetRecalls(IEnumerable&lt;String&gt; automakers)</div><div class="line">&#123;</div><div class="line">	// iterate over each automaker, and do something </div><div class="line">	// interesting to yield out their recalls</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In Visual Studio (and perhaps MonoDevelop?), I’ve now told the API consumer what I expect, they will get intellisense when they’re constructing the call. Whereas, if I just told you to hand me an AutoMakersList, there’s ambiguity in what is required. The other benefit of this approach is that I’ve reduced the calling requirements on this method. The above example is actually not done yet, and here’s where it will seemlike I’m contradicting my point, but I’m not, really.. really.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Automaker</div><div class="line">&#123;</div><div class="line">	public String Name&#123;get; set;&#125;</div><div class="line">	public bool IsValid()&#123;return valid;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public RecallList GetRecalls(IEnumerable&lt;Automaker&gt; automakers)</div><div class="line">&#123;</div><div class="line">	//do something interesting.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Instead of passing in just a a list of string, why not pass in “Automaker?” On the surface, it seems very much like just passing a simple String, the difference is that I have attached the context explicitly to the Name property, instead of implicitly from the name of the collection in which the object was stored. Let that marinate in your brain for a minute. They’re actually radically different concepts, one of them works, and IMHO, one of them doesn’t.<br>Part two:<br>“RecallList”<br>Here, the API designer got it half right. The the context for each recall is explicitly attached to the object that cares – “Recall”, but RecallList doesn’t actually add any value, it essentially says “this is a list of Recall”, which is the same thing as what “List<recall>” says, in a much more concise way. Although I think Classes are cheap cheap cheap and people are too often reluctant to add them, in this case “RecallList” is just redundant.<br>Finally, passing a list in or out adds extra overhead that neither the API designer or the caller needs. In both cases, List places extra requirements on either side of the call, when really everyone meant to say, “here’s a set of something that you can read through. (IEnumerable)” When we apply all of these suggestions together, this is the method we’re left with:</recall></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">///&lt;summary&gt;This will produce the recalls associated</div><div class="line">/// with the specified automakers.&lt;/summary&gt;</div><div class="line">///&lt;param name=&quot;automakers&quot;&gt;This is a set of automakers for </div><div class="line">/// which recalls will be retrieved.&lt;/param&gt;</div><div class="line">public IEnumerable&lt;Recall&gt; GetRecalls(IEnumerable&lt;Automaker&gt; automakers)</div><div class="line">&#123;</div><div class="line">	// iterate over each automaker, use the &quot;IsValid()&quot; method </div><div class="line">	// to determine if it should be processed, and do something </div><div class="line">	// interesting to yield out the recalls</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Hopefully the above snippet makes some sense and shows why we should fight the urge to add classes that don’t bring their own “flavor” to the application.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Part One:&lt;br&gt;When it comes to code, I’m pretty particular about how things are named. To me, naming both classes and class members is one
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Why you should write comments before code.</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-06-12-why-you-should-write-comments-before-code/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-06-12-why-you-should-write-comments-before-code/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve blogged before that I think the way a developer names blocks of their code says a lot about their experience, not only in a particular platform, but also what they know about the Software Development Life Cycle. But I don’t want to rehash that. Today, I want to talk about when and why to comment. When I create a new class definition, I typically try to add a summary comment right then. I also expect this of my team members. It may seem pedantic, but there’s a very good reason for it. Expressing in English* the intent of the class tends to help me clarify the Single Responsibility that I have for that class. If I find that I have trouble specifying the expected behavior of a class in the summary, that generally means I don’t have the plan for why/how/when I need to use that class. If I find I need a paragraph to explain the purpose of the class, it might be doing too much.</p>
<p>Doing too much is bad.</p>
<p>So, when I find that this is the case, I look to see which parts of the summary should be broken out — those breakouts typically fall along class definition lines, and before I know it, I can summarize most classes in one or two sentences, and the only do as much as they should.</p>
<p>Only doing as much as you should is “A Good Thing.(tm)”</p>
<p>The other benefit is that my colleagues can take a look at my code and understand large blocks without digging though and inspecting each member of the class. Truly, that was the point of OOP. Rather than trying to explain how each block of code works (inline comments), explain why each block of code exists (first-class documentation). This rule of thumb works the same for members of a class. If you can type out a sentence explaining what you’re trying to do, there’s a much better chance that you will actually do that thing. There’s even a good chance that you’ll be able to identify things that are leaking in and shouldn’t be. If When your code has gotchas, these should be outlined in the block, or the blocks. This is your chance to explain yourself. Do you need that string to be formatted just so? Do you return something in a particular order? What do you expect from consumers? While I’m on this subject, please don’t just fill out comments to make the compiler warnings go away. That’s just a waste of your time.. I am aware of a particular tool that provides phantom summaries; summaries that are there, but have no substance. The intentions were good, but it entirely misses the point. Imagine you bought a dictionary and all of the definitions used the word in the definition.</p>
<p>Definition: A sentence that defines something.</p>
<p>C# and Java both have great documentation support, I believe that other languages/platforms have started to make these summary-type comment sections closer to “first-class citizens,” so your reasons for not commenting code is dwindling. I’ll leave you with this: Every line of code makes perfect sense while you’re writing it. Really good code will make sense to other people with a little bit of explanation. Great code is that which can be understood by your future self, and the people that follow you. Why not hedge your bets and provide some good documentation to make your good code, great code. * It doesn’t have to be English, the first language of your team is best for these comments.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve blogged before that I think the way a developer names blocks of their code says a lot about their experience, not only in a particul
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Happy Birthday, Zach</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-07-10-happy-birthday-zach/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-07-10-happy-birthday-zach/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is just a bit of a nostalgic rambling about one of my life-long friends and how we get to where we are. As is probably apparent if you’ve read any of my blog posts. I’ve been fascinated with personal computers for a large part of my life. I’ve had an obsession with them and their power to change my life… Starting with this:</p>
<p><img src="/imgs/happy_birthday_zach/Apple_iie.jpg" alt="Apple IIe"></p>
<p>This is a story of how the Apple IIe changed my life. One of my best friends, Zach, and I used to out-nerd each other in the computer lab of our grade school. Zach’s parents were newspaper folks. So they (and naturally, Zach) lived, breathed, and loved their Macs. I was solidly on the I-B-M side of the line. The computer lab consisted of about 25 Apple IIe machines, a Mac Powerbook, and an IBM PC. Zach and I were the only two kids that were big enough dorks to be allowed to touch the PowerBook or the PC - which sucked in middle school, but has paid off handsomely in our “old age.” So, that was the state of things in 1992, I continued on my path being a PC sympathizer, and Zach stayed in the Mac camp. We had mutual respect for one another. Zach has even used a PC when he had to (although, I cannot say I was so open-minded).</p>
<p><img src="/imgs/happy_birthday_zach/Andrew_and_Zach_ca2000.jpg" alt="Andrew And Zach, ca2000"></p>
<p>There were times when we disagreed on things, and I was not always the best friend in the high school years. Looking back, there are any number of paths our lives could have taken. I could have been sick the day that Zach showed up in 4th grade. Zach could have decided that my disdain for Macs was too much to bear. But as it turns out, we’ve been friends for almost 20 years, and outside of my wife, there is no one else on this planet that I trust as much as Zach. I sometimes wonder what other directions our lives might have gone, but I am mostly thankful for the way they’ve turned out so far. Happy Birthday Zach. P.S. Zach did eventually win the little Mac battle, but that’s another blog post.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is just a bit of a nostalgic rambling about one of my life-long friends and how we get to where we are. As is probably apparent if y
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Form is Function</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-10-16-form-is-function/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-10-16-form-is-function/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>About ten years ago, as any self-respecting nerd would do, I was toying with Linux. I remember endless hours of package installations and command-line hocus-pocus, searching forums, swapping video cards… I even got SAMBA working. Once.<br>I wanted to make the switch off of Windows, but there was that nagging feeling that I might need to get some work done on my PC someday, and I didn’t want to be stuck. I wanted all the unix utilities, and all of the freedom that Linux seemed to offer. I just didn’t want to give up the convenience that Windows gave me.<br>Then somebody showed me something that changed my life:</p>
<p><img src="/imgs/form_function/IBook_G4.jpg" alt="iBook G4"></p>
<p>Ok, it wasn’t the iBook itself, but what they had installed on it: OpenStep installed via Fink and running on a local X11 install. I found out I could have all of the stuff I wanted from Linux, and the safety net of an operating system that “just worked” (I should note that Windows XP and later usually ‘just work’, and if you don’t install a bunch of junk on them, they’ll get the job done).<br>So, The Function of the thing was just so impressive. It really could do everything I wanted. But there was something else….<br>The Form<br>At a time when this was the most beautiful PC you could get:</p>
<p><img src="/imgs/form_function/sony_vaio_z505.jpg" alt="Sony Vaio Z505"></p>
<p>PowerBooks looked like this:</p>
<p><img src="/imgs/form_function/PowerBook.jpg" alt="PowerBook"></p>
<p>Now, you’re about to say that “It’s just a machine, you use it to get work done. Who cares what it looks like?”<br>And you’d be right.<br>But you’d also be wrong.<br>Try this out; You can put wi-fi in a laptop that weighs 15 pounds. It’s “portable,” but will you carry it anywhere? Now, chop that to 8 pounds, and there’s a chance you’d tote it into public. Chop it to 1 pound, and it can change your life. That’s a very real case where Form basically creates utility and adds value.</p>
<p>We try really hard not to seem like the form of things matter to us. It’s too “touchy-feely.” But, deep down, we make decisions about things all the time based on design and form. Frankly, if we embrace that fact, we’d make better overall decisions.</p>
<p>Think about it, do you make decisions about whether you will buy something from a website based on how “reputable” it looks? I do.<br>So this brings us to the one true point of this post…<br>Form is function.<br>Functionally, Windows, Linux and Mac all suited my needs. But in the end, the one that brought all of them together in the most cohesive Form won my heart. Linux definitely has the most raw power. Windows gets the job done with a painful - sometimes crippling - UI. But, the Mac brings the power of *nix and the cohesive, ergonomic UI in a way that the other two couldn’t. As a result, I’ve had a Mac since 2003, and I will probably never switch again. The functionality is important, but the form is actually the selling point.<br>People that have read my blog will know that I write C# for a living. I love the language, and I think .net is a great platform in many respects. But I also see the cracks. I think that the tools you’re using actually have a direct impact on what you produce. Windows lacks a certain style, and a large chunk of the stuff that gets pumped out from .net development reflects that. Windows is not personal, so a big chunk of the software designed on Windows reflects that. .Net/Windows drives towards a mentality that if the code is “functional”, that’s “good enough,” but it’s the little touches that make people feel good about the software we make.<br>I try to develop software that people want to use. And that’s at every level, whether it’s a public-facing website, or a database driver.<br>I want the person that uses my software to feel like a superhero, leaping small buildings in a single bound, not taking the stairs like all the other mere mortals.</p>
<p>That’s not a functional thing, that’s a form thing, and it’s the difference between software that people will cherish, and software that people will try to forget.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;About ten years ago, as any self-respecting nerd would do, I was toying with Linux. I remember endless hours of package installations and
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fear and Loathing in Software Engineering.</title>
    <link href="http://andrewtheken.com/2014/12/31/2011-04-16-2011-04-16-fear-and-loathing-in-software-engineering-htm/"/>
    <id>http://andrewtheken.com/2014/12/31/2011-04-16-2011-04-16-fear-and-loathing-in-software-engineering-htm/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been writing software professionally for a couple of years now, it’s a good gig, and something I love doing. I have always had a very strong sense of obligation to do my best. Although I have made mistakes throughout my career, there is no doubt that I will make more in the future.</p>
<p>What I’ve noticed is that beyond deadlines, ever-evolving requirements, perplexingly bad code, and vexing platform behavior, there is one thing above all else that stresses me out: Being blocked from fixing broken code.</p>
<p>I’m not talking about code that is ugly. I mean code that I had a hand in that is just plain wrong.<br>I like to think that others would describe me as a person of the utmost integrity, that will own up to my mistakes, and work to correct them. I tend to first look at issues and search for a solution, then see how to make sure that particular issue (or class of issues) doesn’t happen again. Every minute that there’s code in production that is broken because of me weighs on my mind. I really feel like the worst thing you can do to a competent developer is to show them something that they could have prevented, or that they could fix, and then tell them that they can’t touch it.</p>
<p>Make the leap of faith that mistakes will happen, and that the best developers will be responsible for some of them. Do your best to streamline your development process so that correcting mistakes is cheap. Remember that relaxed (and happy) developers are productive developers.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been writing software professionally for a couple of years now, it’s a good gig, and something I love doing. I have always had a ver
    
    </summary>
    
    
      <category term="software" scheme="http://andrewtheken.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t waste your time.</title>
    <link href="http://andrewtheken.com/2014/12/31/2012-04-15-dont-waste-your-time/"/>
    <id>http://andrewtheken.com/2014/12/31/2012-04-15-dont-waste-your-time/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>I am always surprised when a developer prefers a solution that requires special maintenance or deep knowledge of a platform to make it work versus a simple solution that will work in all cases. It’s like leaving landmines for those that follow them. There are a ton of examples of this, but the most recent one that caused me to blog about it is the  debate over semicolon inclusion/exclusion in Javascript.<br>For those not familiar, people have “discovered” that there are some cases where it is “ok” to leave out a semicolon at the end of some javascript statements. The debate is whether this is a “good practice” or not. (See this EPIC discussion on the topic for a taste…)</p>
<p>Unless I’ve missed something, the main benefit of this is that you save one keystroke. The perceived benefit to the person who does this is pure vanity — they can show you how “deeply” they know JS. What this signifies to me is that they don’t care about the person who needs to read/use the code later. It also tells me that they would rather waste their energy on memorizing/recalling arcane rules than writing anything of consequence.</p>
<p>The only way that one can ever write anything worthwhile is if they can focus fully on the model/algorithm and focus as little energy as possible on the mechanics of typing the code. To be clear, the majority of the energy you spend on any development task is not “pressing the right keys.” (Note that I am not claiming to be the originator of this idea — and YES, Atwood is saying that you shouldn’t be wasting your brain power on typing…).</p>
<p>As a rule, I find the most direct, “works in the most cases” way to do something, and then I have freed up the brain cells for the more important work. Using semicolons even when the computer <em>may</em> insert them is one of those — there is no need to find out later that I mis-remembered the rules. I also include curly braces for all if/else statements (in languages that use them) — as a developer I can eliminate ambiguity in my intent by including just 2 extra characters, this seems like a cheap price to pay.</p>
<p>Another argument always surfaces when one discusses this topic: “If it’s in the language, I can (and should) use it.” I feel it would be a waste of time to attempt to explain why this is a totally wrong-headed view. Every single language that has been created to date (natural and artificial) has flaws. It is not reasonable to say that because a feature exists, that is enough justification for using it. The converse is reasonable: when a feature is shown to cause bugs, it should not be used. (I leave the “shown to cause bugs” as an exercise to the reader).</p>
<p>There is simply no excuse for a developer choosing a less robust construct over a more robust one whenever they have the opportunity. Characters are not in short supply, but brain cells are. Do yourself a favor and don’t waste them memorizing silly rules to impress your friends.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am always surprised when a developer prefers a solution that requires special maintenance or deep knowledge of a platform to make it wo
    
    </summary>
    
    
      <category term="programming holywars" scheme="http://andrewtheken.com/tags/programming-holywars/"/>
    
  </entry>
  
  <entry>
    <title>Tuples in .net considered...</title>
    <link href="http://andrewtheken.com/2014/12/31/2012-05-27-tuples-in-net-considered/"/>
    <id>http://andrewtheken.com/2014/12/31/2012-05-27-tuples-in-net-considered/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>One of the features that became available in .Net 4.0 was a built in type for a Tuple. Tuples are useful within the scope of a function, where having an ad hoc data structure that holds a set of related values together can make writing an algorithm a little easier. The best part of a feature like this is that you can focus on what your algorithm should be doing, and a little less on the class definitions required to support the algorithm.</p>
<p>The first sign of trouble is when you use a Tuple as a return type. If you’ve spent 5 minutes with them in C#, you will notice how ugly that can get. All of the sudden, you’re trying to figure out what the String value stored in Item1 is, and what the String value store in Item2 is. As projects grow, this can quickly make it impossible for other developers to discover what the reference they’re working with actually represents</p>
<p>Aside from the main drawback, that you have no idea what the return value from a method is trying to represent, C# 2.0 included a much more intuitive/informative syntax for defining single-use types in algorithms: Anonymous Types. There’s virtually no reason to use a Tuple over an anonymous type within the scope of a method body.</p>
<p>Compare:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Tuple.Create(&quot;bob&quot;, “marley&quot;, 42, true);</div></pre></td></tr></table></figure></p>
<p>With:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new &#123;FirstName = “bob&quot;, LastName = “marley&quot;, Age = 36 , IsMusician = true&#125;;</div></pre></td></tr></table></figure></p>
<p>I’ll grant you that the second takes a bit more typing, but we’re not trying to “Save The Characters.” We’re trying to write an algorithm that we can read and debug.<br>If you later decide to promote the anonymous type so that you can return it from a method, it’s as simple as defining a class with the appropriate properties and changing the new declaration to:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new Person &#123;FirstName = “bob&quot;, LastName = “marley&quot;, Age = 36 , IsMusician = true&#125;;</div></pre></td></tr></table></figure></p>
<p>I’ll bet tools like ReSharper even provide this sort of refactoring. I believe that Tuples were added to support better interop between F# programs and C#/VB.Net applications <a href="http://msdn.microsoft.com/en-us/magazine/dd942829.aspx" target="_blank" rel="external">interesting read on the design of Tuples</a>.</p>
<p>If you’re doing C#-only development, Tuples come at a high cost to code clarity. For the reasons above, I (now) mostly avoid using them (in C#). When I understand how tuples are used in F# a little better, I may change my mind.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the features that became available in .Net 4.0 was a built in type for a Tuple. Tuples are useful within the scope of a function, 
    
    </summary>
    
    
      <category term="dotnet csharp style" scheme="http://andrewtheken.com/tags/dotnet-csharp-style/"/>
    
  </entry>
  
  <entry>
    <title>No SQL, No Problems (or: Mo&#39; SQL, Mo&#39; Problems)</title>
    <link href="http://andrewtheken.com/2014/12/31/2010-02-26-no-sql-no-problems-or-mo-sql-mo-problems/"/>
    <id>http://andrewtheken.com/2014/12/31/2010-02-26-no-sql-no-problems-or-mo-sql-mo-problems/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s talk about NoSQL:</p>
<p>If you’ve been following the latest trends in the .net world via reddit, twitter, or your favorite blogs, you’ve been seeing a great deal of chatter about a term called NoSQL. Some might even call it a ‘movement’ but that scares me just a little bit - when things become ‘movements’, their meanings become a bit nebulous. Here are a few cases where a ‘NoSQL’ solution might be useful to you:<br>You have a several multi-million row tables that each have foreign key relationships to one another, joins against these tables pound the server, but must return rapidly.</p>
<p>You have “jagged” datasets where each record has a different composition of fields and children, those children in turn have their own properties.</p>
<p>You need to find a root record based on a complex set of relations to other tables.<br>A New Hope: There are many NoSQL options out there right now, but for reasons that will become obvious very shortly, I am going to talk about one in particular: MongoDB. MongoDB is a “document-oriented” database written in c++ that stores your documents in a format called “BSON.” BSON is conceptually similar to JSON, but is a binary format that also explicitly carries type information. Mongo has some nice features, including:</p>
<ul>
<li>Dynamic creation and allocation of databases and document collections (including the capability of having nested collections)</li>
<li>Ability to do deep-graph searches (i.e. locate documents based on child properties of the document)</li>
<li>Ability to execute arbitrary JavaScript functions for aggregation and as criteria of searching</li>
<li>Very few requirements on what can be inserted into a database</li>
<li>Support for regex searching.</li>
<li>Speed</li>
<li>…more…</li>
</ul>
<p>But you should be warned: MongoDB doesn’t make ACID guarantees. If you’re storing twitter updates, you’re probably ok, if you’re storing financial transactions, don’t use MongoDB. But this is a blog about C# where we have strong &amp; static typing, we live and breath order in our daily lives (ha!). “Leave all that ‘No SQL’ to those dirty Ruby hippies”, you say.</p>
<p>Let me break it to you: NoSQL doesn’t mean NoStructure.</p>
<p>To that end, I’ve been (with lots of help) incubating a project on GitHub called NoRM. In brief, NoRM is a library to connect to MongoDB using .Net (and Mono) and to query and hydrate documents into strongly &amp; statically-typed documents in a way that doesn’t make us C# developers queasy. We still have a long way to go before a 1.0 release, but I think it’s important to point out some of the guys that have been most enthusiastic about this project (and contributed some great code and ideas) include: James Avery Jason Alexander Rob Conery Nate Kohari Karl Seguin These guys really know their stuff, and I am so happy to have them working on this with me. My next post will be about some of the design decisions we’ve made with NoRM and how you might use it (soon) in some of your own projects.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s talk about NoSQL:&lt;/p&gt;
&lt;p&gt;If you’ve been following the latest trends in the .net world via reddit, twitter, or your favorite blogs, 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Just Lazy Enough.</title>
    <link href="http://andrewtheken.com/2014/12/31/2012-11-04-just-lazy-enough/"/>
    <id>http://andrewtheken.com/2014/12/31/2012-11-04-just-lazy-enough/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>There’s cases where memoizing a bit of data in memory can make dramatic improvements in performance (like a lookup table that changes infrequently, but is accessed frequently.) We may even find that as long as it’s “eventually consistent”, that’s good enough.<br>The .net 4.0 framework introduced a brilliant little class called Lazy<t>. With this class, you could pass a function that would get called once when a value was requested, and then would be stored for future requests. This was helpful when you didn’t know exactly when an expensive resource would be needed, or it didn’t make sense to load it at the moment when they system was getting initialized, for example.<br>One drawback of the Lazy<t> is that it will resolve the value one time, and then keep it for the lifetime of the Lazy instance. That’s where “LazyEnough<t>“ might come in handy. The idea of this class is similar, you initialize it in the same way you initialize Lazy<t>, but with one extra (optional) parameter, TimeSpan.<br>Once initialized, LazyEnough<t> will work almost identically to Lazy<t>, except that each time the TimeSpan elapses, the next call to Value will invalidate the currently memoized value, call the loader Func<t> again, and return the updated value (memoizing it in the process).</t></t></t></t></t></t></t></p>
<p><script src="https://gist.github.com/atheken/4014001.js"></script><br>You should note that this class intentionally doesn’t try to minimize the number of calls to the loader, the idea is that you’re getting a huge gain from just reducing the number of calls to the expensive resource, adding locking code for the rare case where multiple threads will contend to load the same resource is overkill.<br>Anyway, just thought I’d share, hope you enjoy!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There’s cases where memoizing a bit of data in memory can make dramatic improvements in performance (like a lookup table that changes inf
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Essential Tools for node.js</title>
    <link href="http://andrewtheken.com/2014/12/31/2013-09-01-Essential-Tools-for-node.js/"/>
    <id>http://andrewtheken.com/2014/12/31/2013-09-01-Essential-Tools-for-node.js/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2015-01-04T14:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Update: If you like this post, you may also want to check out my “<a href="/2013/09/02/Node.js-App-Basics-Part-1/">Node.js App Basics</a>“ series.</em></p>
<p>Getting started with <strong>node.js</strong> can be somewhat challenging. This is not because there’s anything intrisically difficult, but the culture and community is actually so prolific that it’s difficult to know where to start.</p>
<p>In my node.js adventures, here’s a few tools that I have found to be critical, and save me loads of time.</p>
<ol>
<li><p><strong><a href="https://npmjs.org" target="_blank" rel="external">NPM</a></strong></p>
<p> This one is so core, it’s actually included with the node.js installer. If you’ve done development in any mainstream language, you’ll recognize and appreciate this one right away. “NPM” stands for “Node Package Manager”, and it has a few design characteristics that actually make it work better than many of the package managers you’ve used, including:</p>
<ul>
<li>RubyGems</li>
<li>Nuget</li>
<li>Pypi</li>
</ul>
</li>
<li><p><strong><a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a></strong></p>
<p> Grunt does your, <em>ahem</em>, grunt-work. Using grunt, lots of standard build-time tasks can be achieved. For example:</p>
<ul>
<li>JS can be linted and minified.</li>
<li>Compile/minify your LESS/SASS/CSS.</li>
<li>Run Unit Tests</li>
<li>Copy/package assets</li>
<li>Pre-compile templates to JS (if that’s your thing).</li>
<li><p>“Compile” <a href="http://coffeescript.org/" target="_blank" rel="external">coffeescript</a> / <a href="http://www.typescriptlang.org/" target="_blank" rel="external">typescript</a> / <a href="https://github.com/google/traceur-compiler" target="_blank" rel="external">tracuer</a></p>
<p>Grunt can be configured to run your set of default tasks each time you type this:</p>
<p>  $ grunt</p>
<p>But, using “watch,” Grunt can also monitor sets of files and perform specific tasks when things change (this is a great way to speed up the feedback loop).</p>
</li>
</ul>
</li>
<li><p><strong><a href="https://npmjs.org/package/supervisor" target="_blank" rel="external">Supervisor</a></strong></p>
<p> Node is great for simple one-off scripts, but many people are finding that they want to use it for web development. I think this is a great use, as there are many cheap/free hosting solutions to get people started, but also that you can learn JS/CSS/HTML and be on your way to developing a complete web-app (rather than needing to learn JS and Ruby/Python/C#, etc.)</p>
<p> Supervisor will monitor a folder and start/restart a node process when anything changes. I have this started with Grunt, so that I have my node process restart when I save changes to the server files, as well as monitoring files that I need minified for the client.</p>
<p> Installing supervisor is simple:</p>
<pre><code>$ npm install supervisor -g
</code></pre><p> And using it is now just as simple as this:</p>
<pre><code>$ supervisor server.js
</code></pre><p> Supervisor will now monitor js changes in the current directory (and sub-directories) and then restart the server.js file when they change.</p>
</li>
<li><p><strong>A good terminal.</strong></p>
<p> While I am sure it’s possible to get pretty good with node.js (and dealing with packages/etc.) without a good terminal, I think it’s likely that you’ll be missing out on many time-savers by doing so. </p>
<p> I use “Terminal.app” on OS X, with <a href="http://www.zsh.org/" target="_blank" rel="external">zsh</a> as my default shell (with <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">“oh-my-zsh”</a>, but I have used bash for a long time and this is also a pretty good shell (and the default on OS X).</p>
<p> I have never really liked any of the terminals in Windows, but <a href="http://www.hanselman.com/blog/Console2ABetterWindowsCommandPrompt.aspx" target="_blank" rel="external">some people talk a lot about Console2</a></p>
<p> If you’re using Linux, you probably already have experience in a terminal, and could care less about my suggestions.</p>
</li>
<li><p><strong><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></strong></p>
<p> Git has grown incredibly in popularity over the last several years, and it’s actually a great tool to help with your <a href="http://en.wikipedia.org/wiki/Personal_software_process" target="_blank" rel="external">personal software process</a>, regardless of which version control systems your employer/clients require you to use.</p>
<p> Getting some basic git knowledge is not required right away, but if you get serious about node.js, you will end up seeing/wanting to know a bit about git.</p>
<p> If you plan to deploy to Heroku, Nodejitsu, Azure, or Joyent, you’ll need to know a little bit of git, sooner or later.</p>
</li>
<li><p><strong>A *nix Package Manager</strong></p>
<p> Node.js is able to talk with many different technologies, and having a complete development environment where you can work disconnected is incredibly valuable. No wi-fi? No Problem.</p>
<p> Package managers allow you to easily install services on your dev machine, and in production environments.</p>
<p> As I have mentioned in the past, I really have loved OS X and my mac for many years. The combination of <em>It Just Works &trade;</em>, and the ability to get some *nix functionality has really made it an incredible environment for development.</p>
<p> A few years ago “<a href="http://brew.sh/" target="_blank" rel="external">homebrew</a>“ was introduced to the world, and installing packages on OS X from source has never been easier:</p>
<pre><code>$ brew install couchdb
</code></pre><p> If you’re a developer on OS X and don’t have this installed. <em>Do this now!</em> You will thank me.</p>
<p> If you’re on Linux, you might have rpm, apt, yum, or some other package management, again, you’ll need to get to know these tools, as they will help you immensely.</p>
<p> Again, I am not sure if there’s a great analog on Windows, but perhaps the closest is <a href="http://www.cygwin.com/" target="_blank" rel="external">cygwin</a>, which is “Better than nothing.”</p>
</li>
<li><p><strong>A good text editor</strong></p>
<p> Some folks love <em>notepad.exe</em>.</p>
<p> Some folks love <em>vim</em>.</p>
<p> Some folks love <em>sublime text</em>.</p>
<p> Regardless which you love, a good text editor that can do some of the work for you is essential. <em>At a minimum</em> your editor of choice should have the ability to do syntax highlighting/format blocks. Everything after that is icing.</p>
</li>
</ol>
<p>Each of these is worthy of its own post, and I am leaving many of the tools in the chain out, but hopefully this will provide a bit of direction on where to get started.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Update: If you like this post, you may also want to check out my “&lt;a href=&quot;/2013/09/02/Node.js-App-Basics-Part-1/&quot;&gt;Node.js App Basics
    
    </summary>
    
    
      <category term="nodejs" scheme="http://andrewtheken.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Stupid Easy Web Serving</title>
    <link href="http://andrewtheken.com/2014/12/31/2013-08-31-stupid-easy-web-serving/"/>
    <id>http://andrewtheken.com/2014/12/31/2013-08-31-stupid-easy-web-serving/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>From time to time, it’s useful to be able to serve a bunch of static files in a web server to see how the various elements behave.</p>
<p>I’ve been spending some time with Node.js over the last few weeks, and am finding that there are tons of useful tools that can be installed with one command, that make developing a pleasure.</p>
<p>So, if you don’t already have <a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> installed, go and do that now, it will also install npm, which is indispensible.</p>
<p>After this is installed, you can open a command prompt and install <a href="https://npmjs.org/package/http-server" target="_blank" rel="external">http-server</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install http-server -g</div></pre></td></tr></table></figure>
<p>With this installed, you can move to any directory and simply type:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http-server</div></pre></td></tr></table></figure>
<p>And this will start a web server on port <a href="http://localhost:8080" target="_blank" rel="external">8080</a> that you can then view the files from.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;From time to time, it’s useful to be able to serve a bunch of static files in a web server to see how the various elements behave.&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="nodejs" scheme="http://andrewtheken.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js App Basics - Part 1</title>
    <link href="http://andrewtheken.com/2014/12/31/2013-09-02-Node.js-App-Basics-Part-1/"/>
    <id>http://andrewtheken.com/2014/12/31/2013-09-02-Node.js-App-Basics-Part-1/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:41:51.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Feel free to review the other posts in this series:</p>
<ul>
<li><a href="/2013/09/01/Essential-Tools-for-node.js/">Part 0</a></li>
<li>Part 1 (You’re already here!)</li>
<li><a href="/2013/09/03/Node.js-App-Basics-Part-2/">Part 2</a></li>
<li><a href="/2013/09/20/Node.js-App-Basics-Part-3/">Part 3</a> </li>
<li><a href="/2013/11/23/Node.js-App-Basics-Part-4/">Part 4</a></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>Following up on <a href="/2013/09/01/Essential-Tools-for-node.js">yesterday’s post</a> on getting started with Node.js, I’ll work through some of the basics for getting your first node.js web app running.</p>
<p>Please keep in mind that I’ve been in and out of node for about two years now, but have only recently done anything non-trivial with it. Chances are that you can find lots of guidance on <a href="http://stackoverflow.com/questions/tagged/node.js" target="_blank" rel="external">Stack Overflow</a> from people that have been working with node professionally, but they might also skip over some tidbits that are useful to those just getting their feet wet.</p>
<p>In this tutorial, we’ll use node.js to serve a front-end for the Wikipedia API and to search and display a single article abstract. I’m going to deliberately skip “best practices” in order to get us to a “fully working” version of this demo project. I will write a few follow up posts to outline how I’d do things in a <em>professional</em> situation afterwards.</p>
<p>I’m going to go ahead and assume you’ve got a terminal you’re happy with, and have already installed node.js/npm and it’s in your PATH. Let’s get started!</p>
<p>Create a new directory and cd into it:</p>
<pre><code>$ mkdir wikipedia_front_end
$ cd wikipedia_front_end
</code></pre><p>The whole node world revolves around a file called “<a href="https://npmjs.org/doc/json.html" target="_blank" rel="external">package.json</a>“, fortunately, npm is great at helping you to get this configured:</p>
<pre><code>$ npm init
</code></pre><p>This will ask you a series of questions about your app, you can choose your own values, and modify them as you wish at a later time. Keeping a package.json file will allow you to define packages and requirements for use when you want to deploy this project later.</p>
<p>While node.js ships with an http server that can handle incoming requests, the base server is very light-weight, and only does basic HTTP interactions. For anything more sophisticated, you’ll want to include some additional packages to make your life easier. </p>
<p>Node has a very popular package called “connect,” and this can be used to create a “pipeline” of actions that execute when a request is made to our application. </p>
<p>Standard things that usually happen in a web request include:</p>
<ul>
<li>Form/cookie parsing</li>
<li>Logging</li>
<li>File serving</li>
<li>Authentication/Authorization</li>
<li>Custom server logic</li>
</ul>
<p><em>connect</em> provides some of this functionality, and a <em>middleware</em> infrastructure to allow us to do our own logic. <em>Middleware</em> was popularized by Ruby’s “<a href="http://rack.github.io/" target="_blank" rel="external">rack</a>“ (and later copied by many frameworks).</p>
<p>If you’re not familiar with the <em>middleware</em> paradigm, the basic idea is that one can abstract an HTTP interaction down into two parts:</p>
<ol>
<li>An HTTP Request</li>
<li>An HTTP Response</li>
</ol>
<p>After these objects are created, a stack of <em>middleware</em> can be defined to interact with each of these two elements in a very elegant way:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function(request, response)&#123;</div><div class="line">	/* Read information from the request and </div><div class="line">	then (optionally) manipulate the response. */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>It is worth noting that middleware can read/modify both the request and the response, as well as having some side-effect (such as logging) that doesn’t modify either of these objects.</strong> (And there is a <em>very</em> important gotcha in node.js related to this that I will cover later on).</p>
<p>You could probably write your own middleware server in node in an afternoon, but <em>connect</em> includes some standard middleware that you’ll be happy to have, so let’s install it now:</p>
<pre><code>$ npm install connect --save
</code></pre><p>The “–save” in this command causes the package requirements to be stored into package.json, which will allow them to be restored if you deployed to a service like <a href="http://www.heroku.com" target="_blank" rel="external">heroku</a>.</p>
<p>OK, so we’re just about to get our server going, here’s all the code you’ll need (save this to “server.js” in the “wikipedia_front_end” folder you created above):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//&apos;require&apos; says &quot;pull in this installed package&quot;</div><div class="line">var connect = require(&apos;connect&apos;);</div><div class="line"></div><div class="line">//we&apos;re still using Node&apos;s built in HTTP server, so let&apos;s pull it in.</div><div class="line">var http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">//create our middleware stack (just send a basic message for now):</div><div class="line">var app = connect()</div><div class="line">	.use(function(request, response)&#123;</div><div class="line">		response.write(&apos;Hello from connect!&apos;);</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">//start a server on port 3000, any request that comes in should call</div><div class="line">//the &quot;app&quot; function that is our middleware stack from above.</div><div class="line">http.createServer(app).listen(3000);</div></pre></td></tr></table></figure>
<p>Finally, in your terminal, type:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node server.js</div></pre></td></tr></table></figure>
<p>This will start your server at <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>. Navigate there to see the fruits of your labor. Note that you can go to any path on this server and the same response will be sent from node.</p>
<p>To stop this server, you can type “ctrl+c”, and this will end the node process.</p>
<p>If you’re like me, you may want to play at this point, you can certainly stop and start node after each modification “server.js”, but I have found that “supervisor” is a great utility to restart the server after each modification, you can install it like so:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install supervisor -g</div></pre></td></tr></table></figure>
<p>This will install this command globally (that’s what the ‘-g’ does), so that you can use it from whichever projects you’re working on.</p>
<p>Let’s invoke the server again, but this time with supervisor:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ supervisor server.js</div></pre></td></tr></table></figure>
<p>You can now update and save changes to ‘server.js’ and supervisor will restart your app instantly, this will save you lots of time in development.</p>
<p><a href="/2013/09/03/Node.js-App-Basics-Part-2/">Next time, we’ll cover some important details about how the middleware works, and adding some custom server logic.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Feel free to review the other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2013/09/01/Essential-Tools-for-node.js/&quot;&gt;Part 0&lt;/a&gt;&lt;/li&gt;

    
    </summary>
    
    
      <category term="nodejs" scheme="http://andrewtheken.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js App Basics - Part 2</title>
    <link href="http://andrewtheken.com/2014/12/31/2013-09-03-Node.js-App-Basics-Part-2/"/>
    <id>http://andrewtheken.com/2014/12/31/2013-09-03-Node.js-App-Basics-Part-2/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Feel free to review the other posts in this series:</p>
<ul>
<li><a href="/2013/09/01/Essential-Tools-for-node.js/">Part 0</a></li>
<li><a href="/2013/09/02/Node.js-App-Basics-Part-1/">Part 1</a> </li>
<li>Part 2 (You’re already here!)</li>
<li><a href="/2013/09/20/Node.js-App-Basics-Part-3/">Part 3</a> </li>
<li><a href="/2013/11/23/Node.js-App-Basics-Part-4/">Part 4</a></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>In this installement, let’s extend our server side to log requests, and to serve some static content.</p>
<p>As a quick refresher, here’s our server.js file from part 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//&apos;require&apos; says &quot;pull in this installed package&quot;</div><div class="line">var connect = require(&apos;connect&apos;);</div><div class="line"></div><div class="line">//we&apos;re still using Node&apos;s built in HTTP server, so let&apos;s pull it in.</div><div class="line">var http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">//create our middleware stack (just send a basic message for now):</div><div class="line">var app = connect()</div><div class="line">    .use(function(request, response)&#123;</div><div class="line">        response.write(&apos;Hello from connect!&apos;);</div><div class="line">        response.end();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">//start a server on port 3000, any request that comes in should call</div><div class="line">//the &quot;app&quot; function that is our middleware stack from above.</div><div class="line">http.createServer(app).listen(3000);</div></pre></td></tr></table></figure>
<p>Open up your terminal, cd to the directory you created in part 1, and run:</p>
<pre><code>$ supervisor server.js
</code></pre><p>You can now open and <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> and updates to server.js will be visible each time you refresh.</p>
<p>As described previously, middleware can be added into a pipeline so that for each request that matches, various actions can be taken. The “connect” package we installed yesterday includes some useful middleware for us to get started:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var app = connect()</div><div class="line">	//add logging to all requests</div><div class="line">	.use(connect.logger())</div><div class="line">	//do the original request handling added in part 1.</div><div class="line">    .use(function(request, response)&#123;</div><div class="line">        response.write(&apos;Hello from connect!&apos;);</div><div class="line">        response.end();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>Now that we’ve added logging, save ‘server.js,’ if you’re running this using supervisor, you can refresh your application in your browser and see that the requests made to your server are now logged in your terminal.</p>
<p>The line “.use(connect.logger())” can seem a bit strange at first, but this is doing something that is very common in modern Javascript (and other functional languages), connect.logger() is a function that returns a… <em>function</em>. </p>
<p>If you remember the description of middleware from part 1, that function’s signature is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function(request, response);</div></pre></td></tr></table></figure>
<p>Depending on which languages you’re familiar with, this passing of functions can feel a bit strange. <strong>Trust me, this ends up being critical to successful javascript/node.js development, and a major strength of the language, as we will see later.</strong></p>
<p>Another common scenario is to serve some static assets for things like css, client-side javascript, and (non-dynamic) html. A fairly standard convention in “rack-like” apps is that files located in a “public” folder in the root directory of your application will be served as static files. With the connect middleware, it’s very easy to add this functionality.</p>
<p>Let’s create a CSS, JS, and HTML file to illustrate this point.</p>
<p>Open a new instance of your terminal and cd to the base directory of your application.</p>
<pre><code>$ mkdir public
</code></pre><p>Next, create a file called “index.html” and paste this content into it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		*&#123;</div><div class="line">			font-family: arial;</div><div class="line">			padding: 0px;</div><div class="line">			margin: 0px;</div><div class="line">		&#125;</div><div class="line">		html&#123;</div><div class="line">			width: 100%;</div><div class="line">			background: #cfcfcf;</div><div class="line">		&#125;</div><div class="line">		body&#123;</div><div class="line">			text-align: center;</div><div class="line">			width: 80%;</div><div class="line">			margin: 20px auto;</div><div class="line">			padding: 10px;</div><div class="line">			background: white;</div><div class="line">			border-radius: 5px;</div><div class="line">			box-shadow: 0px 0px 5px 0px;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	Welcome to this static page!</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>Lastly, let’s add the connect middleware for static content to our stack in <em>server.js</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var app = connect()</div><div class="line">	//add logging to all requests</div><div class="line">	.use(connect.logger())</div><div class="line">	//serve &quot;static files from the public directory&quot;</div><div class="line">	.use(connect.static(__dirname + &apos;/public&apos;))</div><div class="line">	//do the original request handling added in part 1.</div><div class="line">    .use(function(request, response)&#123;</div><div class="line">        response.write(&apos;Hello from connect!&apos;);</div><div class="line">        response.end();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><strong>Note that <em>__dirname</em> is “special” in node, and refers to the directory from which the node process was started. This is your application’s “root”, so we are able to append “/public” to the end of it so that we serve static files out of the public directory that we just created.</strong></p>
<p>When you navigate to <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a>, the index.html will be served (many http servers, including connect, will look for index.html and serve it if you don’t include a file name in the url).</p>
<p>When you navigate to another url on the site, note that the “static” middleware doesn’t kick in, and our middleware from the first part of this tutorial kicks in and handles the response (i.e. <a href="http://localhost:3000/part1" target="_blank" rel="external">http://localhost:3000/part1</a>). <strong>This is a <em>very important</em> property of middleware, pay close attention to this and think about what the implications are.</strong></p>
<p>So far, I’ve left out one other important factor related to middleware, the concept of “next”, or “pass-through.”</p>
<p>You might have noticed that the logger middleware did not prevent the middleware that followed from running, and that the inclusion of the “static” middleware <em>did</em> prevent our base middleware from running, what’s going on?</p>
<p>To explain this, we need a brief digression into how javascript function parameters work…</p>
<p>Javascript functions can be defined with a certain number of parameters (this is called ‘<a href="http://en.wikipedia.org/wiki/Arity" target="_blank" rel="external">Arity</a>‘), but then called with a different number of parameters, so this is totally legal:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var helloWorldMiddleware = function(request, response)&#123;</div><div class="line">  if(request.url === &apos;/hello_world&apos;)&#123;</div><div class="line">    response.write(&apos;Hello World!&apos;);</div><div class="line">  &#125;else&#123;</div><div class="line">    response.write(&apos;Goodbye Sweet World!&apos;);</div><div class="line">  &#125;</div><div class="line">  response.end();</div><div class="line">&#125;</div><div class="line"></div><div class="line">helloWorldMiddleware(obj1, obj2, obj3);</div></pre></td></tr></table></figure>
<p>In this case, obj3 will be totally ignored by the function (though you can still get to it if you want via a special “arguments” variable). Again, this may seem peculiar at first, but is actually a very useful property of the language.</p>
<p>To keep things simple, we wrote a middleware with an Arity of two, but connect will actually call the function with three arguments:</p>
<ol>
<li>request (usually abbreviated ‘req’)</li>
<li>response (usually abbreviated ‘res’)</li>
<li>callback (usually called ‘next’, or ‘done’)</li>
</ol>
<p>Notice that we have a new parameter “callback,” which can be used to pass control on to the next middleware if we do not wish to modify the response (as is the case with the logger middleware, and the static middleware when no static file matches the requested url path).</p>
<p>Let’s modify the <em>helloWorldMiddleware</em> I described above, allowing it to return ‘Hello World!’ when the path matches, but passing control to our original middleware when it does not:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//produce a special message when the url matches.</div><div class="line">function(req, res, next)&#123;</div><div class="line">	 	if(req.url === &apos;/hello_world&apos;)&#123;</div><div class="line">	 		res.write(&apos;Hello World!&apos;);</div><div class="line">	 		res.end();</div><div class="line">	 	&#125;else&#123;</div><div class="line">	 	  //pass control to the next middleware in the stack...</div><div class="line">	 		next();</div><div class="line">	 	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>If you’ve been following along, this is what your <em>server.js</em> file should have in it at this point:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//&apos;require&apos; says &quot;pull in this installed package&quot;</div><div class="line">var connect = require(&apos;connect&apos;);</div><div class="line"></div><div class="line">//we&apos;re still using Node&apos;s built in HTTP server, so let&apos;s pull it in.</div><div class="line">var http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">//create our middleware stack (just send a basic message for now):</div><div class="line">var app = connect()</div><div class="line">	//add logging to all requests</div><div class="line">	.use(connect.logger())</div><div class="line">	 //serve &quot;static files from the public directory&quot;</div><div class="line">	 .use(connect.static(__dirname + &apos;/public&apos;))</div><div class="line">	 //produce a special message when the url matches.</div><div class="line">	 .use(function(req, res, next)&#123;</div><div class="line">	 	if(req.url === &apos;/hello_world&apos;)&#123;</div><div class="line">	 		res.write(&apos;Hello World!&apos;);</div><div class="line">	 		res.end();</div><div class="line">	 	&#125;else&#123;</div><div class="line">	 	  //pass control to the next middleware in the stack...</div><div class="line">	 		next();</div><div class="line">	 	&#125;</div><div class="line">	 &#125;)</div><div class="line">	//do the original request handling added in part 1.</div><div class="line">	.use(function(request, response)&#123;</div><div class="line">		response.write(&apos;Hello from connect!&apos;);</div><div class="line">		response.end();</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">//start a server on port 3000, any request that comes in should call</div><div class="line">//the &quot;app&quot; function that is our middleware stack from above.</div><div class="line">http.createServer(app).listen(3000);</div></pre></td></tr></table></figure>
<p>Navigating to <a href="http://localhost:3000/hello_world" target="_blank" rel="external">http://localhost:3000/hello_world</a> should produce</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World!</div></pre></td></tr></table></figure>
<p>While navigating to another path (like: <a href="http://localhost:3000/another_path" target="_blank" rel="external">http://localhost:3000/another_path</a>) should produce:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello from connect!</div></pre></td></tr></table></figure>
<p><strong>I’ll cover this in more detail in the next part of this tutorial, but this is <em>very important</em>, each middleware you create <em>must</em> either modify the request (usually by writing content to the response object), or call the callback (next()/done()). If your middleware doesn’t do this for every codepath, you will hang up your node server, and no new requests will be processed.</strong></p>
<p>In the next part of the series, we’ll talk about the node process model, and start to dig into one of the central concepts in node.js, <strong>asynchronicity</strong>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Feel free to review the other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2013/09/01/Essential-Tools-for-node.js/&quot;&gt;Part 0&lt;/a&gt;&lt;/li&gt;

    
    </summary>
    
    
      <category term="nodejs" scheme="http://andrewtheken.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node.js App Basics - Part 3</title>
    <link href="http://andrewtheken.com/2014/12/31/2013-09-20-Node.js-App-Basics-Part-3/"/>
    <id>http://andrewtheken.com/2014/12/31/2013-09-20-Node.js-App-Basics-Part-3/</id>
    <published>2014-12-31T22:45:27.000Z</published>
    <updated>2016-11-13T21:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Feel free to review the other posts in this series:</p>
<ul>
<li><a href="/2013/09/01/Essential-Tools-for-node.js/">Part 0</a></li>
<li><a href="/2013/09/02/Node.js-App-Basics-Part-1/">Part 1</a> </li>
<li><a href="/2013/09/03/Node.js-App-Basics-Part-2/">Part 2</a></li>
<li>Part 3 (You’re already here!)</li>
<li><a href="/2013/11/23/Node.js-App-Basics-Part-4/">Part 4</a></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>Alright, so now we’re getting into the fun stuff!</p>
<h1 id="Asynchronicity"><a href="#Asynchronicity" class="headerlink" title="Asynchronicity"></a>Asynchronicity</h1><p>Node.js is a great example where chosing to rigorously stick to a constraint can really pay off.</p>
<p>As you might know, JavaScript is, by definition, single-threaded (for our purposes, accept this as true). What this means is that you can do the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//WARNING: You should NEVER do this </div><div class="line">//in javascript! (and maybe nowhere)</div><div class="line"></div><div class="line">//set up JS to fire an event after 1 millisecond...</div><div class="line">setTimeout(function()&#123;</div><div class="line">	console.log(&apos;called!&apos;);</div><div class="line">&#125;, 1);</div><div class="line"></div><div class="line">while(true)&#123;</div><div class="line">	//do nothing, but watch your CPU peg! ;-)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And the function with the log call will never get called, simply because the while loop is running in a single thread, and the “event” that should fire after one millisecond will not happen until after the while loop completes.</p>
<p>This behavior makes working with javascript conceptually very easy, as you don’t need to deal with any pesky locking structures for things that might otherwise happen simultaneously. For example, within a function body, there’s no chance of shared state getting modified by another thread.</p>
<p>In Node.js, this means that all logic we write will run on a single thread, and due to the nature of node, this quality forces libraries to be developed in a non-blocking way. The above code snippet is “blocking” in that the while loop will continue to run indefinitely, and since we’ve only got one thread, this means all other work on this node process will also be halted (and this is basically true in the browser, too).</p>
<p>Let’s try to put this notion into perspective:</p>
<p>You go out to a nice, busy, restaurant. It’s a pretty fancy place, and only has few tables available. Unfortunately, you didn’t plan ahead, and all the tables are in use by other folks. The host is quite polite, and takes down your phone number. He’ll call you as soon as a table becomes available. This is great because you don’t have to stand by the door, waiting. Instead, you’re freed up to go and have a drink at the bar. This also allows other customers (who also didn’t plan ahead) to come in and ask to be called when a table is available. Eventually, a table frees up, and the host calls you back to let you know you can now be seated for dinner. This system works well for both you and the restaurant, they can serve customers very efficiently, and you can enjoy a drink at the bar while waiting (instead of just standing in the way, staring the host down!).</p>
<p>Whether you believe me yet, Node.js (and in general, asynchronous programming models) attempt to have the same interaction as described above. Instead of you, as a customer requesting a table, we can think of your node.js application making a request to an external resource (like a database, or the file system, or a web service). Most of the time this will introduce <em>a lot</em> of waiting around, and node.js has been optimized to make the best of this situation.</p>
<p>To simplify, this is the model that node is designed for:</p>
<ol>
<li>Node process makes request for “slow” resource, providing a “callback” function for when it completes.</li>
<li>Node process continues to do other work, including additional requests to other resources.</li>
<li>The “callback” function is called, with any potential error information, or response data if no error occurred.</li>
</ol>
<p>Here’s a simple example using “<a href="https://npmjs.org/package/nano" target="_blank" rel="external">nano</a>,” a very nice and simple package for using <a href="http://couchdb.apache.org" target="_blank" rel="external">CouchDB</a> in node.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//assume &quot;db&quot; is a connection to a database.</div><div class="line"></div><div class="line">//look up the record with &quot;this_is_a_key&quot; as the id.</div><div class="line">db.get(&apos;this_is_a_key&apos;, function(error, data)&#123;</div><div class="line">	if(error)&#123;</div><div class="line">		console.log(&quot;An error occurred when looking &quot;+</div><div class="line">			&quot;up the record for the key.&quot;, error);</div><div class="line">	&#125;</div><div class="line">	else&#123;</div><div class="line">		console.log(&quot;Got some data, w00t!&quot;, data);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>(Don’t worry if you don’t understand all of this, the main point is to see how the callback works.)</p>
<p>The example is a bit contrived, but the point is that there are almost no “blocking” functions in javascript, instead, the preferred style for anything that would normally block is to provide a callback and then observe the data/error when it becomes available. Note that in many cases, it is possible to exclude a callback, this is sometimes called “fire and forget,” and there are cases when this is beneficial.</p>
<p>The above example works great for when you have a “one and done” requirement. But another common case is that I need to manipulate a large batch of records. Since reading data from an external source is (at least) 10x slower than reading it from memory, it might be nice to be able to do the manipulation on records as they become available. </p>
<p>Because node uses an “event loop” this ends up being very simple, and not much different than the example above.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//Assume a db created, and there&apos;s a </div><div class="line">//method that returns an &quot;EventEmitter&quot;</div><div class="line"></div><div class="line">//get an object that will fire and </div><div class="line">//event each time a row is available.</div><div class="line">var selection = db.getRows();</div><div class="line"></div><div class="line">//listen for &quot;row&quot; events as the rows </div><div class="line">//become available and handle them.</div><div class="line">selection.on(&apos;row&apos;, function(data)&#123;</div><div class="line">	console.log(&apos;row became available&apos;, data);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//it is common with this sort of </div><div class="line">//model to listen for an &quot;error&quot; event separately.</div><div class="line">selection.on(&apos;error&apos;, function(error)&#123;</div><div class="line">	console.log(&apos;an error happend. darn!&apos;, error);	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The key difference here, is rather than having a single callback, we define callbacks to handle specific events that could happen once we cause the data selection action to occur. (See the <a href="http://nodejs.org/api/events.html#events_class_events_eventemitter" target="_blank" rel="external">EventEmitter docs here</a>.) The event-based model is common in many languages, so this might already be familiar to you.</p>
<p>Understanding Asynchronicity is <em>really</em> important in node.js, and, is the main reason why a single node process is able to scale so well (though, v8 is also pretty fast, and serves as a good base from which to build). The “single non-blocking thread” constraint allows us to use our CPU very efficiently, but as you can see in the first code snippet above, it’s also <em>really</em> easy to do something that can get you into trouble.</p>
<p>Now that we’ve covered this fundamental part of node.js, we can get back to our wikipedia search app in the next installment.</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Feel free to review the other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2013/09/01/Essential-Tools-for-node.js/&quot;&gt;Part 0&lt;/a&gt;&lt;/li&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
